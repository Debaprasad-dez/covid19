{"version":3,"sources":["api/index.js","App.js","serviceWorker.js","index.js"],"names":["fetchData","a","axios","get","data","modifiedData","confirmed","TR","total","active","recovered","deceased","App","state","data2","fetchedData","this","setState","className","id","start","end","duration","separator","width","height","src","frameborder","allow","allowfullscreen","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAIaA,EAAS,uCAAC,gCAAAC,EAAA,+EAEIC,IAAMC,IAJvB,6CAEa,uBAERC,EAFQ,EAERA,KACDC,EAAa,CACfC,UAAUF,EAAKG,GAAGC,MAAMF,UACxBG,OAAOL,EAAKG,GAAGC,MAAMF,UAAUF,EAAKG,GAAGC,MAAME,UAAUN,EAAKG,GAAGC,MAAMG,SACrED,UAAUN,EAAKG,GAAGC,MAAME,UACxBC,SAASP,EAAKG,GAAGC,MAAMG,UAPZ,kBAWRN,GAXQ,yFAAD,qD,gBCwGPO,E,4MArGbC,MAAM,CACJT,KAAK,GAAGU,MAAM,I,kMAGUd,I,OAAlBe,E,OACNC,KAAKC,SAAS,CAACb,KAAKW,I,qIAOhB,OACF,yBAAKG,UAAU,yBACb,wBAAIA,UAAU,OAAOC,GAAG,SAAxB,YAAyC,0BAAMD,UAAU,MAAhB,YACzC,6BACA,6EACA,6BACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,sBACf,qCACA,2BAEE,kBAAC,IAAD,CACEE,MAAO,EACPC,IAAK,CAACL,KAAKH,MAAMT,KAAKE,WACtBgB,SAAU,EACVC,UAAU,QAKd,yBAAKL,UAAU,wBACf,sCACA,2BACA,kBAAC,IAAD,CACIE,MAAO,EACPC,IAAK,CAACL,KAAKH,MAAMT,KAAKK,QACtBa,SAAU,EACVC,UAAU,QAKd,yBAAKL,UAAU,yBACf,yCACA,2BACA,kBAAC,IAAD,CACIE,MAAO,EACPC,IAAK,CAACL,KAAKH,MAAMT,KAAKM,WACtBY,SAAU,EACVC,UAAU,QAId,yBAAKL,UAAU,uBACf,wCACA,2BACA,kBAAC,IAAD,CACIE,MAAO,EACPC,IAAK,CAACL,KAAKH,MAAMT,KAAKO,UACtBW,SAAU,EACVC,UAAU,SAKhB,yBAAKL,UAAU,oBACf,4BAAQM,MAAM,MAAMC,OAAO,MAAMC,IAAI,4CAA4CC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,KAEhM,yBAAKX,UAAU,kBACb,wBAAIC,GAAG,QAAP,QACA,wGACA,gGACA,oFACA,yEACA,mHACA,4DACA,4GAEF,yBAAKD,UAAU,kBACb,wBAAIC,GAAG,QAAP,YACA,mFACA,qEACA,2DACA,4EACA,8DACA,2DACA,qEACA,2DACA,4DACA,8EACA,uBAAGW,KAAK,IAAG,qE,GA7FHC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c690b62.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst url='https://api.covid19india.org/v4/data.json';\r\n\r\nexport const fetchData=async()=>{\r\n    try{\r\n        const {data}=await axios.get(url);\r\n        const modifiedData={\r\n            confirmed:data.TR.total.confirmed,\r\n            active:data.TR.total.confirmed-data.TR.total.recovered-data.TR.total.deceased,\r\n            recovered:data.TR.total.recovered,\r\n            deceased:data.TR.total.deceased,\r\n            \r\n            \r\n        }\r\n        return modifiedData;\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { fetchData } from './api';\nimport CountUp from 'react-countup'\n\n\nclass App extends React.Component{\n  state={\n    data:{},data2:{}\n  }\n  async componentDidMount(){\n    const fetchedData=await fetchData();\n    this.setState({data:fetchedData});\n  }\n \n  \n\n  render(){\n    \n        return (\n      <div className=\"container text-center\">\n        <h1 className=\"mt-4\" id=\"title\">COVID-19 <span className=\"h5\">Tripura</span></h1>\n        <hr/>\n        <p>Latest Data of COVID-19 in our State (Tripura)</p>\n        <hr/>\n        <div className=\"row my-5\">\n          <div className=\"col-md-3 text-info\">\n          <h5>Total</h5>\n          <p>\n            \n            <CountUp \n              start={0}\n              end={[this.state.data.confirmed]}\n              duration={5}\n              separator=\",\"\n            />\n          </p>\n          \n          </div>\n          <div className=\"col-md-3 text-danger\">\n          <h5>Active</h5>\n          <p>\n          <CountUp \n              start={0}\n              end={[this.state.data.active]}\n              duration={5}\n              separator=\",\"\n            />\n          </p>\n          \n          </div>\n          <div className=\"col-md-3 text-success\">\n          <h5>Recovered</h5>\n          <p>\n          <CountUp \n              start={0}\n              end={[this.state.data.recovered]}\n              duration={5}\n              separator=\",\"\n            />\n          </p>\n          </div>\n          <div className=\"col-md-3 text-muted\">\n          <h5>Deceased</h5>\n          <p>\n          <CountUp \n              start={0}\n              end={[this.state.data.deceased]}\n              duration={5}\n              separator=\",\"\n            />\n          </p>\n          </div>\n        </div>\n        <div className=\"iframe-container\">\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1APwq1df6Mw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        </div>\n        <div className=\"text-left my-5\">\n          <h2 id=\"tips\">Tips</h2>\n          <p>Clean your hands often. Use soap and water, or an alcohol-based hand rub.</p>\n          <p>Maintain a safe distance from anyone who is coughing or sneezing.</p>\n          <p>Wear a mask when physical distancing is not possible.</p>\n          <p>Donâ€™t touch your eyes, nose or mouth.</p>\n          <p>Cover your nose and mouth with your bent elbow or a tissue when you cough or sneeze.</p>\n          <p>Stay home if you feel unwell.</p>\n          <p>If you have a fever, cough and difficulty breathing, seek medical attention.</p>\n        </div>\n        <div className=\"text-left my-5\">\n          <h2 id=\"tips\">Helpline</h2>\n          <p>My Gov CORONA helpdesk whatsapp Number - 09013151515</p>\n          <p>State Help line Number - 0381-231-5879</p>\n          <p>West Tripura - 0381-232-3945</p>\n          <p>Sepahijala District - 9862752963 / 9862557952</p>\n          <p>Khowai District - 03825-222-229</p>\n          <p>Gomati District - 9436106361</p>\n          <p>South Tripura District - 03823-222-145</p>\n          <p>Dhalai District - 9886866853</p>\n          <p>Unakoti District - 9862036563</p>\n          <p>North Tripura District - 8787693683/ 9366225399</p>\n          <a href=\"\"><p>https://covid19.tripura.gov.in/</p></a>\n          \n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}